Topic 1 — Distributed Version Control System (DVCS)

1. Concept
Version Control = System to track changes in code over time.
Centralized VCS (CVCS) → One central server holds the main repo (e.g., SVN).
If the server is down, no commits/pulls are possible.
Distributed VCS (DVCS) → Every developer has a full copy of the repository including history on their local machine.
Git, Mercurial are examples.
Why it matters:
Even if GitHub/Bitbucket goes down, you still have the full repo & can work offline.

2. How DVCS works (Git example)
Remote repo hosted on GitHub/Bitbucket/GitLab.
You clone it → your local machine has entire code + commit history.
You make changes → commit locally.
You push changes to remote.
Others pull changes from remote.

3. Visual
        ┌──────────────┐
        │ Remote Repo  │  (GitHub)
        └───────▲──────┘
                │ Push / Pull
 ┌──────────────┴──────────────┐
 │ Developer A    Developer B │
 │ Full local repo Full local │
 │ history       history      │
 └────────────────────────────┘

4. Advantages
Offline work possible.
Faster operations (local commits, branching).
Backup in every dev’s machine.
Flexible workflows (branches, merges).

5. Hands-on in VS Code
Check if Git is installed
git --version

See how to pull repo and see commit history
git log shows the commit history of your Git repository.









Topic 2 — What is Git & Why Use It

1. What is Git?
Git is a Distributed Version Control System created in 2005 by Linus Torvalds (creator of Linux Kernel).
Originally built to manage the massive Linux Kernel project.
Now used worldwide for all types of projects — from solo coding to huge enterprise apps.

2. Git’s Key Features
| Feature                         | Meaning                                               |
| ------------------------------- | ----------------------------------------------------- |
| **DVCS**                        | Fully local repo & history                            |
| **Snapshot system**             | Saves a *picture* of the files, not just changes      |
| **Content-addressable storage** | Uses SHA-1 hash to identify content uniquely          |
| **Speed**                       | Operations are local — commits, branching are instant |
| **Non-linear development**      | Many branches in parallel, merging later              |
| **Data integrity**              | Every file is checked by its hash                     |
| **Free & open-source**          | Maintained by a large community                       |

3. Why Use Git?
Industry standard: Most companies use Git (GitHub, GitLab, Bitbucket).
Team collaboration: Many developers can work simultaneously without overwriting each other.
History tracking: You can go back to any commit in history.
Branch-based workflows: Safely work on features without affecting the main branch.
Supports CI/CD pipelines: Easy integration with build/test/deploy tools.

4. Hands-on in VS Code
Set Your Git Identity: This is important because every commit stores: Author name, Email
git config --global user.name "Ayush Kumar"
git config --global user.email "your-email@example.com"
Verify Git Config
git config --list

5. Pro Tip
If you work with multiple accounts (personal + work), don’t use global config for work repos — we can set it per repo later with:
git config user.name "Work Name"
git config user.email "work-email@example.com"

| Command                                       | Scope  | Applies To                      |
| --------------------------------------------- | ------ | ------------------------------- |
| `git config --global user.name "Ayush Kumar"` | Global | All repos for your user account |
| `git config user.name "Work Name"`            | Local  | Only the current repository     |









Topic 3 — Popular Git Hosting Providers
1. Why do we need hosting providers?
Git works offline, but in a team you need a shared remote repository so everyone can collaborate.
Hosting providers store your repository online with:
Access control (who can view/commit)
Issue tracking
Pull request workflow
CI/CD integration. Study ci/cd in detail

2. The Big Three
| Provider      | Website                                | Free Plan                        | Main Use Cases                           |
| ------------- | -------------------------------------- | -------------------------------- | ---------------------------------------- |
| **GitHub**    | [github.com](https://github.com)       | Unlimited public & private repos | Most popular, huge open-source community |
| **GitLab**    | [gitlab.com](https://gitlab.com)       | Unlimited repos, built-in CI/CD  | Strong DevOps features                   |
| **Bitbucket** | [bitbucket.org](https://bitbucket.org) | Free for small teams             | Tight integration with Jira & Trello     |










Topic 4 — Git Fundamentals
This covers the three main building blocks you’ll use all the time in Git:
Repository
Branch
Commit

1. Repository: A repository (repo) = Your project folder + Git’s hidden .git folder that tracks all history.
Two types:
Local repo → on your computer
Remote repo → on GitHub/GitLab/etc.
Creating a local repo: 
# Create a folder
mkdir git-fundamentals
cd git-fundamentals
# Initialize Git
git init

2. Branch
A branch is an independent line of development.
The default branch is usually called main (or master in older repos).
Branches allow parallel development without disturbing the main code.

Creating & switching branches:
# Create a branch
git branch feature-1
# Switch to it
git checkout feature-1
# OR shortcut: git checkout -b feature-1

Viewing branches
git branch

3. Commit
A commit = A snapshot of your code at a point in time.
Every commit has:
Unique ID (SHA-1 hash)
Author name/email
Commit message
Timestamp

Making your first commit
# Create a file
echo "Hello Git" > hello.txt
# Stage the file
git add hello.txt
# Commit
git commit -m "Add hello.txt with greeting"



<<<<<<< HEAD




Topic 5 — Creating a Repository
There are two main ways to create a Git repository:
Start locally → create repo on your computer, then link to GitHub.
Start on GitHub → create repo online, then clone to your computer.
We’ll do Method 1 first (local → GitHub), because it gives you more control.

# 1️⃣ Create folder & init Git
mkdir my-exciting-project
cd my-exciting-project
git init

# 2️⃣ Add file & commit
echo "# My Exciting Project" > README.md
git add README.md
git commit -m "Add README.md"

# 3️⃣ Link to GitHub repo
git remote add origin https://github.com/YourUsername/my-exciting-project.git

# 4️⃣ Push to GitHub
git push -u origin main   # or master if that's your branch









Topic 6 — Cloning a Repository
Cloning = Downloading a complete copy of a remote repository (code + commit history) onto your local machine.

1. Two ways to clone
HTTPS (easier for beginners): Uses your GitHub username + password or Personal Access Token (PAT) for authentication.
SSH (more secure, no password every time): Uses an SSH key pair to authenticate without entering credentials each time.

2. Clone via HTTPS
Steps:
On your GitHub repo page, click Code → select HTTPS link.
git clone https://github.com/YourUsername/my-exciting-project.git

3. Clone via SSH (Recommended for long-term)  Little problem in commands, though I ran all of them successfully.
Step 1 — Generate SSH key (one-time setup)
ssh-keygen -t rsa -b 4096 -C "your-email@example.com"
Press Enter for file location (~/.ssh/id_rsa default)
Press Enter for no passphrase (or set one if you want)
Step 2 — Add key to SSH agent
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
Step 3 — Add key to GitHub
Copy the key:
cat ~/.ssh/id_rsa.pub
Go to GitHub → Settings → SSH and GPG keys → New SSH key
Paste the copied key.
Step 4 — Clone via SSH
From repo page → Code → SSH link:
git clone git@github.com:YourUsername/my-exciting-project.git

4. Verifying Clone
cd my-exciting-project
git remote -v



| Feature               | HTTPS                                                                                 | SSH                                                                           |
| --------------------- | ------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| **Authentication**    | Username + password or personal access token (PAT)                                    | SSH key pair (public/private)                                                 |
| **Setup**             | No initial setup needed (works immediately)                                           | Requires generating SSH key and adding to Git provider                        |
| **Security**          | Encrypted, but credentials sent with every push/pull                                  | Encrypted, key-based authentication (no password sent every time)             |
| **Convenience**       | Easier for beginners, but needs credentials/PAT for each push (or credential manager) | Once set up, no need to enter credentials again                               |
| **Firewall Friendly** | Works on port 443 (less likely to be blocked)                                         | Uses port 22 (can be blocked in restricted networks)                          |
| **Best Use Case**     | Quick clone when you don’t plan frequent pushes, or when SSH is blocked               | Frequent work with repositories, automation, and better long-term convenience |

If you want speed + no password prompts → go with SSH.
If you want quick start without setup → go with HTTPS.








Topic 7 — Fetching Branch Updates       
https://www.youtube.com/watch?v=KmagW60Li-o
When working in a team, others will make changes to the remote repository.
You need to bring those changes to your local repository to stay up-to-date.

1. Two Main Commands
| Command         | What It Does                                                                                          | When to Use                                          |
| --------------- | ----------------------------------------------------------------------------------------------------- | ---------------------------------------------------- |
| **`git fetch`** | Downloads new commits, branches, and tags from remote, but does **not** merge into your local branch. | When you want to see what’s new before merging.      |
| **`git pull`**  | Downloads new commits **and** merges them into your current branch.                                   | When you’re ready to immediately update your branch. |

2. Visual Difference
[Remote Repo] → fetch → [Local Repo + Local Branches]
                  ↓
              merge manually

[Remote Repo] → pull → [Local Repo Updated Automatically]

Summary:
# 1️⃣ Check if local is outdated
git status

# 2️⃣ Fetch remote changes (does NOT update files yet)
git fetch

# 3️⃣ See new commits from remote
git log origin/main --oneline

# 4️⃣ Merge remote changes into local
git merge origin/main

# 🔄 Shortcut: fetch + merge in one step
git pull origin main

4. Pro Tip
Use fetch if you’re unsure about merging yet — it’s safer.
Use pull when you know the changes are ready to merge.








Topic 8 — Working with Branches.   Shradha video from 51 min. Must see 
Branches let you work on features, bug fixes, or experiments without touching the main code.
Once done, you can merge your branch back into the main branch.

Key Branch Commands
| Action                 | Command                                |
| ---------------------- | -------------------------------------- |
| List branches          | `git branch`                           |
| Create branch          | `git branch branch-name`               |
| Switch branch          | `git checkout branch-name`             |
| Create + switch        | `git checkout -b branch-name`          |
| Delete branch (local)  | `git branch -d branch-name`            |
| Delete branch (remote) | `git push origin --delete branch-name` |

Also see git diff main command. It'll show the difference between main branch and the branch u are currently on

2. Hands-on in VS Code

Step 1 — Create a new branch
# Create and switch to a new branch
git checkout -b feature/add-about

Step 2 — Make changes in the branch
Create a new file:
echo "This is the About section." > about.txt
Stage & commit:
git add about.txt
git commit -m "Add about section"

Step 3 — View branches
git branch

Step 4 — Switch back to main
git checkout main

Step 5 — Delete a branch
git branch -d feature/add-about
If Git warns “branch not fully merged,” and you still want to delete:
git branch -D feature/add-about

Step 6 — Delete branch from remote
git push origin --delete feature/add-about

3. Pro Tips
Keep branch names descriptive:
✅ feature/add-login
✅ bugfix/fix-header
Always create branches from the latest main branch:
git checkout main
git pull origin main
git checkout -b feature/your-feature

4. Little extra.   Changing master to main as default branch.
Rename locally   git branch -m master main
Push new branch to remote    git push -u origin main
Update remote default branch on GitHub. Go to your repository on GitHub. Settings → Branches → Default branch → Change from master to main.
Delete the old master branch from remote:      git push origin --delete master









Topic 9 — Merging in Git. Must see Shradha video from 56 min
Merging = Bringing the changes from one branch into another.
Usually, we merge feature branches into the main (or develop) branch.

1. Types of Merges
| Merge Type       | When it Happens                                     | Behavior                                                |
| ---------------- | --------------------------------------------------- | ------------------------------------------------------- |
| **Fast-forward** | If target branch has no new commits since branching | Moves the branch pointer forward, no new commit created |
| **Merge commit** | If both branches have new commits                   | Creates a new commit that ties histories together       |


# Step 1 — Setup
cd my-exciting-project

# Step 2 — Create & switch to feature branch
git checkout -b feature/add-contact

# Add a file
echo "Contact us at: support@example.com" > contact.txt
git add contact.txt
git commit -m "Add contact.txt"

# Step 3 — Merge into main
git checkout main
git pull origin main   # Always pull latest before merge
git merge feature/add-contact

# Step 4 — Merge commit scenario (optional example)
# (Only happens if both main and feature branch have new commits)
# Just merge and resolve conflicts if needed:
# git merge feature/add-contact

# Step 5 — Push merged changes
git push origin main

# Good Practice:
# - Pull before merging: git pull origin main
# - Merge small, frequent branches
# - Use PRs for team collaboration










Topic 10 — Merge Conflicts. See Shradha video from 1hr
A merge conflict happens when two branches change the same part of the same file and Git doesn’t know which change to keep.

1. Why merge conflicts happen
Example scenario:
You edit about.txt in main branch.
Someone edits the same line in about.txt in feature branch.
When you merge, Git can’t auto-decide which version is correct.

2. Hands-on: Create & Resolve a Conflict in VS Code
Step 1 — Create a repo & file
cd my-exciting-project
echo "Welcome to our website." > about.txt
git add about.txt
git commit -m "Add about.txt"

Step 2 — Create a branch
git checkout -b feature/update-about
Edit about.txt:
Welcome to our awesome website.
Commit changes:
git add about.txt
git commit -m "Update about.txt in feature branch"

Step 3 — Switch to main & edit same line
git checkout main
Edit about.txt:
Welcome to our official website.
Commit changes:
git add about.txt
git commit -m "Update about.txt in main branch"

Step 4 — Merge and cause a conflict
git merge feature/update-about

3. Resolving the Conflict in VS Code
Open about.txt — you’ll see:
<<<<<<< HEAD
Welcome to our official website.
=======
Welcome to our awesome website.
>>>>>>> feature/update-about
Meaning:
HEAD = Your current branch’s version (main)
Below ======= = The incoming branch’s version (feature/update-about)
Option 1 — Keep one version
Replace everything with:    Welcome to our official and awesome website.
Option 2 — Merge manually. You can combine the changes as above, or keep only one side.

Step 5 — Mark conflict resolved
git add about.txt
git commit -m "Resolve merge conflict in about.txt"
✅ Conflict resolved — your branch now contains both sets of changes as you decided.

Pro Tips
Always pull before starting work to reduce conflicts.
Keep feature branches short-lived.
Communicate with teammates about files being edited.